name: build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # See: https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            cc: gcc-12
            cxx: g++-12
            cmake_args: >
              -DAPIMU_ENABLE_MOST_WARNINGS=ON
              -DAPIMU_LD_EXTEND_STACK=ON
          - os: macos-latest
            cc: clang
            cxx: clang++
            cmake_args: >
              -DAPIMU_ENABLE_MOST_WARNINGS=ON
              -DAPIMU_MACOS_LD_EXTEND_STACK=ON
          - os: windows-latest
            cc: cl.exe
            cxx: cl.exe
            cmake_args: >
              -DAPIMU_ENABLE_MOST_WARNINGS=ON
              -DAPIMU_LINK_EXTEND_STACK=ON

    runs-on: ${{ matrix.os }}
    env:
      BUILD_TYPE: RelWithDebInfo
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    # See: https://github.com/actions/virtual-environments
    # See: https://github.com/egor-tensin/setup-gcc
    # - if: ${{ matrix.os == 'ubuntu-latest' }}
    #   name: Set up GCC
    #   uses: egor-tensin/setup-gcc@v1
    #   with:
    #     version: 12

    # See https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#example-using-the-cache-action
    - name: CMake FetchContent Cache
      uses: actions/cache@v3.0.3
      with:
        path: ${{github.workspace}}/build/_deps
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    - name: CMake Configure
      run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} ${{ matrix.cmake_args }}

    # Build your program with the given configuration.
    - name: CMake Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}

    # Execute tests defined by the CMake configuration.
    # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail.
    - name: CMake Test
      working-directory: ${{ github.workspace }}/build
      run: ctest -C ${{ env.BUILD_TYPE }}

    # Upload artifacts.
    - uses: actions/upload-artifact@v3
      with:
        name: artifacts-${{ matrix.os }}
        path: |
          ${{ github.workspace }}/build/testcore
          ${{ github.workspace }}/build/${{ env.BUILD_TYPE }}/testcore.exe
          ${{ github.workspace }}/build/testeval
          ${{ github.workspace }}/build/${{ env.BUILD_TYPE }}/testeval.exe
          ${{ github.workspace }}/build/testserver
          ${{ github.workspace }}/build/${{ env.BUILD_TYPE }}/testserver.exe
